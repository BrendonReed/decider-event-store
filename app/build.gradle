/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.3/userguide/building_java_projects.html in the Gradle documentation.
 */

import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
	// Apply the application plugin to add support for building a CLI application in Java.
	id 'application'
	id 'org.springframework.boot' version '3.2.0'
	id 'io.spring.dependency-management' version '1.1.4'
	id "com.diffplug.spotless" version "6.21.0"
	id "de.undercouch.download" version "5.3.0"
}

repositories {
	// Use Maven Central for resolving dependencies.
	mavenCentral()
}

dependencies {
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation 'org.testcontainers:postgresql'
	testImplementation 'org.flywaydb:flyway-core:10.4.1'
	testImplementation 'org.flywaydb:flyway-database-postgresql:10.4.1'

	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.postgresql:postgresql'
	implementation 'org.postgresql:r2dbc-postgresql'
	implementation 'io.projectreactor:reactor-core'
	implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
	implementation 'org.springframework.boot:spring-boot-starter-json'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation project(':shared')
	implementation project(':domain')
}

// Apply a specific Java toolchain to ease working on different environments.
java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

application {
	// Define the main class for the application.
	mainClass = 'decider.event.store.App'
}


task unitTests(type: Test) {
	include 'decider.event.store.unitTests.*'
}

task componentTests(type: Test) {
	include 'decider.event.store.componentTests.*'
}

tasks.named('test') {
	// Use JUnit Platform for unit tests.
	useJUnitPlatform()
	testLogging {
		events TestLogEvent.FAILED,
				TestLogEvent.PASSED,
				TestLogEvent.SKIPPED,
				TestLogEvent.STANDARD_OUT
		exceptionFormat TestExceptionFormat.FULL
		showExceptions true
		showCauses true
		showStackTraces true

		// set options for log level DEBUG and INFO
		debug {
			events TestLogEvent.STARTED,
					TestLogEvent.FAILED,
					TestLogEvent.PASSED,
					TestLogEvent.SKIPPED,
					TestLogEvent.STANDARD_ERROR,
					TestLogEvent.STANDARD_OUT
			exceptionFormat TestExceptionFormat.FULL
		}
		info.events = debug.events
		info.exceptionFormat = debug.exceptionFormat

		afterSuite { desc, result ->
			if (!desc.parent) {
				// will match the outermost suite
				def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
				def startItem = '|  ', endItem = '  |'
				def repeatLength = startItem.length() + output.length() + endItem.length()
				println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
			}
		}
	}
}

spotless {
	java {
		palantirJavaFormat()
	}
	groovyGradle {
		target '*.gradle' // default target of groovyGradle
		greclipse()
	}
}

//enable pattern matching on types
tasks.withType(JavaCompile) {
	options.compilerArgs.addAll([
		'--enable-preview',
		'--release',
		'17'
	])
}

run {
	standardInput = System.in
	jvmArgs(['--enable-preview'])
}


task downloadNewrelic(type: Download) {
	mkdir 'newrelic'
	src 'https://download.newrelic.com/newrelic/java-agent/newrelic-agent/current/newrelic-java.zip'
	dest file('newrelic')
}

task unzipNewrelic(type: Copy) {
	from zipTree(file('newrelic/newrelic-java.zip'))
	into rootDir
}
